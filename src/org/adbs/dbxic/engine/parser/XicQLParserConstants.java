/* Generated By:JavaCC: Do not edit this line. XicQLParserConstants.java */
package org.adbs.dbxic.engine.parser;


/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface XicQLParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int COMMENT_LINE = 5;
  /** RegularExpression Id. */
  int COMMENT_BLOCK = 6;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 7;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 8;
  /** RegularExpression Id. */
  int EXPONENT = 9;
  /** RegularExpression Id. */
  int STRING_LITERAL = 10;
  /** RegularExpression Id. */
  int ALL = 11;
  /** RegularExpression Id. */
  int AND = 12;
  /** RegularExpression Id. */
  int OR = 13;
  /** RegularExpression Id. */
  int NOT = 14;
  /** RegularExpression Id. */
  int SELECT = 15;
  /** RegularExpression Id. */
  int FROM = 16;
  /** RegularExpression Id. */
  int WHERE = 17;
  /** RegularExpression Id. */
  int ORDER = 18;
  /** RegularExpression Id. */
  int GROUP = 19;
  /** RegularExpression Id. */
  int MAX = 20;
  /** RegularExpression Id. */
  int MIN = 21;
  /** RegularExpression Id. */
  int HAVING = 22;
  /** RegularExpression Id. */
  int DISTINCT = 23;
  /** RegularExpression Id. */
  int IN = 24;
  /** RegularExpression Id. */
  int EXISTS = 25;
  /** RegularExpression Id. */
  int COUNT = 26;
  /** RegularExpression Id. */
  int ASC = 27;
  /** RegularExpression Id. */
  int DESC = 28;
  /** RegularExpression Id. */
  int SUM = 29;
  /** RegularExpression Id. */
  int BY = 30;
  /** RegularExpression Id. */
  int BETWEEN = 31;
  /** RegularExpression Id. */
  int CREATE = 32;
  /** RegularExpression Id. */
  int INSERT = 33;
  /** RegularExpression Id. */
  int UPDATE = 34;
  /** RegularExpression Id. */
  int TABLE = 35;
  /** RegularExpression Id. */
  int VALUES = 36;
  /** RegularExpression Id. */
  int INTO = 37;
  /** RegularExpression Id. */
  int SET = 38;
  /** RegularExpression Id. */
  int DROP = 39;
  /** RegularExpression Id. */
  int DESCRIBE = 40;
  /** RegularExpression Id. */
  int CATALOG = 41;
  /** RegularExpression Id. */
  int COMMANDLIST = 42;
  /** RegularExpression Id. */
  int ENABLE = 43;
  /** RegularExpression Id. */
  int DISABLE = 44;
  /** RegularExpression Id. */
  int HASH = 45;
  /** RegularExpression Id. */
  int DOT = 46;
  /** RegularExpression Id. */
  int COMMA = 47;
  /** RegularExpression Id. */
  int LESS = 48;
  /** RegularExpression Id. */
  int LESSEQUAL = 49;
  /** RegularExpression Id. */
  int GREATER = 50;
  /** RegularExpression Id. */
  int GREATEREQUAL = 51;
  /** RegularExpression Id. */
  int EQUAL = 52;
  /** RegularExpression Id. */
  int NOTEQUAL = 53;
  /** RegularExpression Id. */
  int NOTEQUAL2 = 54;
  /** RegularExpression Id. */
  int OPENPAR = 55;
  /** RegularExpression Id. */
  int CLOSEPAR = 56;
  /** RegularExpression Id. */
  int ASTERISK = 57;
  /** RegularExpression Id. */
  int SLASH = 58;
  /** RegularExpression Id. */
  int PLUS = 59;
  /** RegularExpression Id. */
  int MINUS = 60;
  /** RegularExpression Id. */
  int QUESTIONMARK = 61;
  /** RegularExpression Id. */
  int PERCENT = 62;
  /** RegularExpression Id. */
  int INTEGER = 63;
  /** RegularExpression Id. */
  int LONG = 64;
  /** RegularExpression Id. */
  int CHAR = 65;
  /** RegularExpression Id. */
  int BYTE = 66;
  /** RegularExpression Id. */
  int SHORT = 67;
  /** RegularExpression Id. */
  int DOUBLE = 68;
  /** RegularExpression Id. */
  int FLOAT = 69;
  /** RegularExpression Id. */
  int STRING = 70;
  /** RegularExpression Id. */
  int ID = 71;
  /** RegularExpression Id. */
  int LETTER = 72;
  /** RegularExpression Id. */
  int DIGIT = 73;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<COMMENT_LINE>",
    "<COMMENT_BLOCK>",
    "<INTEGER_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<STRING_LITERAL>",
    "\"all\"",
    "\"and\"",
    "\"or\"",
    "\"not\"",
    "\"select\"",
    "\"from\"",
    "\"where\"",
    "\"order\"",
    "\"group\"",
    "\"max\"",
    "\"min\"",
    "\"having\"",
    "\"distinct\"",
    "\"in\"",
    "\"exists\"",
    "\"count\"",
    "\"asc\"",
    "\"desc\"",
    "\"sum\"",
    "\"by\"",
    "\"between\"",
    "\"create\"",
    "\"insert\"",
    "\"update\"",
    "\"table\"",
    "\"values\"",
    "\"into\"",
    "\"set\"",
    "\"drop\"",
    "\"describe\"",
    "\"catalog\"",
    "\"commandlist\"",
    "\"enable\"",
    "\"disable\"",
    "\"hash\"",
    "\".\"",
    "\",\"",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"=\"",
    "\"!=\"",
    "\"<>\"",
    "\"(\"",
    "\")\"",
    "\"*\"",
    "\"/\"",
    "\"+\"",
    "\"-\"",
    "\"?\"",
    "\"%\"",
    "\"integer\"",
    "\"long\"",
    "\"character\"",
    "\"byte\"",
    "\"short\"",
    "\"double\"",
    "\"float\"",
    "\"string\"",
    "<ID>",
    "<LETTER>",
    "<DIGIT>",
  };

}
